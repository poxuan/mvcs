<?php

namespace $service_ns;

$service_use
use $model_ns\$model_name;
use $validator_ns\$validator_name;
use Callmecsx\Mvcs\Service\ExcelService;

class $service_name $service_extands
{
    // 返回数据
    private $response = [
        'errcode' => 200,
        'errmsg'  => 'success!',
        'ret'     => true,
        'data'    => []
    ];

    // 可用的查询规则,在基类中构造查询
    protected $filterRule = [
        'name'   => 'like',
        'status' => '=',
        'sort'   => 'scope:mySort'
    ];

    /**
     *  获取显示列表
     *
     * @author $author_info
     * @since  $sub_version
     * @param  array $filter
     * @param  int   $page
     * @param  int   $limit
     * @return array
     */
    public function index(array $filter = [])
    {
        $page = array_get($filter,'page',1);
        $limit = array_get($filter,'limit',config('app.pageSize',15));
        $validator_name::select($filter);
        $model = $model_name::with('creator');
        // 定义默认查询操作及搜索条件
        // $model = $model->default();
        // 配合 filterRule 使用基类方法构造查询条件
        // $model = $this->filter($model, $filter);

        $count = $model->count();
        $offset = ($page - 1)* $limit;
        $list = $model->offset($offset)->limit($limit)->orderBy('created_at','desc')->get();
        $result = array();
        foreach ($list as $item) {
            $l = $item->toArray();
            // todo 数据及格式转换如下
            // $l['creator'] = $item->creator?$item->creator->user_name:'';
            $result[] = $l;
        }
        $this->response['data'] = [
            'list'  => $result,
            'total' => $count,
            'page'  => $page,
            'limit' => $limit,
        ];
        
        return $this->response;
    }

    /**
     *  创建新数据
     *
     * @author $author_info
     * @since  $sub_version
     * @param $post
     * @return array
     */
    public function store(array $post)
    {
        // 设置默认属性
        // $post['org_id'] = defined('CURRENT_ORG_ID') ? CURRENT_ORG_ID : 0;
        // $post['created_by'] = session('user_id') ?: 0;
        // 格式校验
        $validator_name::store($post); 
        $result = $model_name::create($post);
        if ($result) {
            $this->response['data'] = $result->toArray();
        } else {
            $this->response['errcode'] = -1;
            $this->response['errmsg']  = 'sql error!';
            $this->response['ret']     = false;
        }
        return $this->response;
    }

    /**
     *  更新一条记录
     *
     * @author $author_info
     * @since  $sub_version
     * @param array $post
     * @param int   $id
     * @return array
     */
    public function update(array $post,int $id)
    {
        $validator_name::update($post, $id);
        $result = $model_name::where('id', $id)->update($post);
        if (!$result) {
            $this->response['errcode'] = -1;
            $this->response['errmsg']  = 'nothing updated!';
            $this->response['ret']     = false;
        }
        return $this->response;
    }

    /**
     *  获取一条记录详情
     *
     * @author $author_info
     * @since  $sub_version
     * @param  int  $id
     * @return array
     */
    public function show(int $id)
    {
        // 应该在设置 全局或本地作用域 以本地为例：在model 添加scopeDefault，防止跨角色获取数据。
        $result = $model_name::default()->findOrFail($id);
        $data = $result->toArray();
        // todo 其他数据获取及格式转换

        // 构造返回结果
        $this->response['data'] = $data;

        return $this->response;
    }

    /**
     *  删除一条或多条数据
     *
     * @author
     * @since  $sub_version
     * @param  int|array  $id
     * @return array
     */
    public function destroy($id)
    {
        $validator_name::destroy($id);
        $result = $model_name::destroy($id);
        if (!$result) {
            $this->response['errcode'] = -1;
            $this->response['errmsg']  = 'nothing deleted!';
            $this->response['ret']     = false;
        }
        return $this->response;
    }

    // 扩展
    $service_traits
}
