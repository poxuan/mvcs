<?php

namespace $validator_ns;

$validator_bu
use $model_ns\$model_name;
use App\Traits\ValidCommon;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Validator;

class $validator_name $validator_bn
{
    use ValidCommon;

    /**
     * 添加验证规则
     *
     * @author chentengfei <tengfei.chen@atommatrix.com>
     * @date   2018-08-06 19:31:45
     * @param  array $data 验证字段
     * @return void
     */
    public static function store($data)
    {
        Validator::make($data,[
            $validator_rule
        ],$model_name::$message)->validate();
    }
    /**
     * 更新验证规则
     *
     * @author chentengfei <tengfei.chen@atommatrix.com>
     * @date   2018-08-06 19:31:45
     * @param  array $data 验证数据
     * @param  int   $id 要更新的行
     * @return void
     */
    public static function update($data,$id)
    {
        Validator::make($data,[
            $validator_rule
        ],$model_name::$message)->validate();
        $model = $model_name::findOrFail($id);
        self::validOrg($model);
    }

    /**
     * 删除验证规则
     *
     * @author chentengfei <tengfei.chen@atommatrix.com>
     * @date   2018-08-06 19:31:45
     * @param  int $id 要删除的行
     * @return void
     */
    public static function destroy($id)
    {
        $model = $model_name::findOrFail($id);
        self::validOrg($model);
    }


    /**
     * 启用/停用验证规则
     *
     * @author chentengfei <tengfei.chen@atommatrix.com>
     * @date   2018-08-06 19:31:45
     * @param  array $ids 要筛选字段
     * @return void
     */
    public static function upDown($ids)
    {
        $models = $model_name::whereIn('id', $ids)->get();
        if(count($models) !== count($ids)) {
            throw new ModelNotFoundException('404 not found！');
        }
        foreach ($models as $item) {
            self::validOrg($item);
        }
    }

    /**
     * 筛选验证规则
     *
     * @author chentengfei <tengfei.chen@atommatrix.com>
     * @date   2018-08-06 19:31:45
     * @param  array $filter 要筛选字段
     * @return void
     */
    public static function select($filter) {
        Validator::make($filter,[
            'page'       => 'sometimes|int|min:1',
            'pageSize'   => 'sometimes|int|in:5,10,15,20,50,100,200',
       ])->validate();

    }

    /**
     * 批量导入验证规则
     *
     * @author chentengfei <tengfei.chen@atommatrix.com>
     * @date   2018-08-06 19:31:45
     * @param  array $data 要验证的数据
     * @return void
     */
    public static function excel(array $data)
    {
        Validator::make($data,[
            $validator_rule
        ],$model_name::$message)->validate();
    }

    /**
     * 产品导入导出字段及其规则
     *
     * 键名  小写,对应数据库字段,含有层次或数组关系时,键名末尾添加[-]+[序号]
     *
     * 数组下标0 表示字段名
     * 数组下标1 为示例显示值
     * 数组下标2 限制规则,当为数组时,为该列在模板中可选项值;为关联表时,结合后续数据处理
     *
     * 后续数据暂只在关联表下可用
     *
     * 数组下标3 数据在关联表不存在时是否支持新建,必填 true or false
     * 数组下标4 以键名在关联表中查找或添加后,必填,以此值作为外键,代替当前键.
     * 数组下标5 内部依赖字段,在其依赖不存在且无法查找到该数据时,不能进行添加操作,用于父子关系
     * 数组下标6 关联表创建时的填充字段,
     *
     * @author chentengfei <tengfei.chen@atommatrix.com>
     * @date   2018-08-06 19:31:45
     * @return array
     */
    public static function excelColumn()
    {
        $keys = [
            $excel_column_rule
        ];

        return $keys;
    }

    /**
     * 导入时可选字段默认值
     *
     * @author chentengfei <tengfei.chen@atommatrix.com>
     * @date   2018-08-07 16:17:07
     * @return array
     */
    public static function excelDefault()
    {
        $keys = [
            $excel_column_default
        ];
        return $keys;
    }
}
